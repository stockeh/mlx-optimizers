<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="kron_8py" kind="file" language="Python">
    <compoundname>kron.py</compoundname>
    <innerclass refid="classmlx__optimizers_1_1kron_1_1_kron" prot="public">mlx_optimizers::kron::Kron</innerclass>
    <innernamespace refid="namespacemlx__optimizers">mlx_optimizers</innernamespace>
    <innernamespace refid="namespacemlx__optimizers_1_1kron">mlx_optimizers::kron</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacemlx__optimizers_1_1kron" refkind="compound"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>random</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>string</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Callable,<sp/>Optional,<sp/>Union</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>mlx.core<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>mx</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>mlx.optimizers<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Optimizer</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a0056a1ad6ff5afc6a451f651607a316f" kindref="member">flat_exponential_schedule</ref>(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>max_prob:<sp/>float<sp/>=<sp/>1.0,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>min_prob:<sp/>float<sp/>=<sp/>0.03,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>decay:<sp/>float<sp/>=<sp/>0.001,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>flat_start:<sp/>float<sp/>=<sp/>250,</highlight></codeline>
<codeline lineno="14"><highlight class="normal">)<sp/>-&gt;<sp/>Callable:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Anneal<sp/>preconditioner<sp/>update<sp/>probability<sp/>during<sp/>beginning<sp/>of<sp/>training.</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PSGD<sp/>benefits<sp/>from<sp/>more<sp/>preconditioner<sp/>updates<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>training,</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>but<sp/>once<sp/>the<sp/>preconditioner<sp/>is<sp/>learned<sp/>the<sp/>update<sp/>probability<sp/>can<sp/>drop<sp/>low.</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>schedule<sp/>is<sp/>an<sp/>exponential<sp/>anneal<sp/>with<sp/>a<sp/>flat<sp/>start.<sp/>Default<sp/>settings<sp/>keep</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>update<sp/>probability<sp/>at<sp/>1.0<sp/>for<sp/>200<sp/>steps<sp/>then<sp/>exponentially<sp/>anneal<sp/>down<sp/>to</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>`min_prob`<sp/>by<sp/>4000<sp/>steps.<sp/>Default<sp/>settings<sp/>work<sp/>very<sp/>well<sp/>for<sp/>most<sp/>models<sp/>and</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>training<sp/>regimes.</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">schedule(step):</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Exponential<sp/>anneal<sp/>with<sp/>flat<sp/>start.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>mx.array(step,<sp/>dtype=mx.float32)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>max_prob<sp/>*<sp/>mx.exp(-decay<sp/>*<sp/>(step<sp/>-<sp/>flat_start))</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>mx.clip(prob,<sp/>min_prob,<sp/>max_prob)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schedule</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classmlx__optimizers_1_1kron_1_1_kron" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlx__optimizers_1_1kron_1_1_kron" kindref="compound">Kron</ref>(Optimizer):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Kronecker-Factored<sp/>Preconditioned<sp/>Stochastic<sp/>Gradient<sp/>Descent<sp/>[1].</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PSGD<sp/>is<sp/>a<sp/>second-order<sp/>optimizer<sp/>that<sp/>uses<sp/>Hessian-<sp/>or<sp/>whitening-based<sp/>:math:`(gg^T)`</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>preconditioners<sp/>and<sp/>Lie<sp/>groups<sp/>to<sp/>improve<sp/>convergence.<sp/>Kron<sp/>uses<sp/>Kronecker-factored</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>preconditioners<sp/>for<sp/>tensors<sp/>of<sp/>any<sp/>number<sp/>dimension.</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[1]<sp/>Xi-Lin<sp/>Li,<sp/>2015.<sp/>Preconditioned<sp/>Stochastic<sp/>Gradient<sp/>Descent.</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>https://arxiv.org/abs/1512.04202</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>https://github.com/lixilinx/psgd_torch</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>learning_rate<sp/>(float<sp/>or<sp/>callable):<sp/>the<sp/>learning<sp/>rate.</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1<sp/>(float,<sp/>optional):<sp/>coefficient<sp/>used<sp/>for<sp/>computing<sp/>running<sp/>averages<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradient.<sp/>Default:<sp/>``0.9``</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_decay<sp/>(float,<sp/>optional):<sp/>weight<sp/>decay<sp/>factor.<sp/>Default:<sp/>``0.0``</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precond_update_prob<sp/>(float<sp/>or<sp/>callable,<sp/>optional):<sp/>probability<sp/>of<sp/>updating<sp/>the</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preconditioner.<sp/>Default:<sp/>``None``<sp/>(flat<sp/>exponential<sp/>schedule)</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_size_triangular<sp/>(int,<sp/>optional):<sp/><sp/>maximum<sp/>size<sp/>for<sp/>dim&apos;s<sp/>preconditioner<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triangular.<sp/>Default:<sp/>``8192``</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_ndim_triangular<sp/>(int,<sp/>optional):<sp/>minimum<sp/>number<sp/>of<sp/>dimensions<sp/>a<sp/>layer<sp/>needs</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>have<sp/>triangular<sp/>preconditioners.<sp/>Default:<sp/>``2``</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_save_mode<sp/>(str,<sp/>optional):<sp/>(None,<sp/>&apos;one_diag&apos;,<sp/>or<sp/>&apos;all_diag&apos;).<sp/>None:<sp/>set<sp/>all</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preconditioners<sp/>to<sp/>be<sp/>triangular,<sp/>&apos;one_diag&apos;:<sp/>sets<sp/>the<sp/>largest<sp/>or<sp/>last<sp/>dim<sp/>to</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>diagonal<sp/>per<sp/>layer,<sp/>and<sp/>&apos;all_diag&apos;:<sp/>sets<sp/>all<sp/>preconditioners<sp/>to<sp/>be<sp/>diagonal.</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>``None``</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>momentum_into_precond_update<sp/>(bool,<sp/>optional):<sp/>whether<sp/>to<sp/>use<sp/>momentum<sp/>in</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preconditioner<sp/>update.<sp/>Default:<sp/>``True``</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>rng<sp/>=<sp/>random.Random(5318008)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ae6f7b816cbb5c57c04de68279f02dc22" kindref="member">__init__</ref>(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>learning_rate:<sp/>Union[float,<sp/>Callable[[mx.array],<sp/>mx.array]],</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1:<sp/>float<sp/>=<sp/>0.9,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_decay:<sp/>float<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precond_update_prob:<sp/>Optional[Union[float,<sp/>Callable[[mx.array],<sp/>mx.array]]]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_size_triangular:<sp/>int<sp/>=<sp/>8192,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_ndim_triangular:<sp/>int<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_save_mode:<sp/>Optional[str]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>momentum_into_precond_update:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super().<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ae6f7b816cbb5c57c04de68279f02dc22" kindref="member">__init__</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._maybe_schedule(</highlight><highlight class="stringliteral">&quot;learning_rate&quot;</highlight><highlight class="normal">,<sp/>learning_rate)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a7311c555c452817a4b11fbd7e6f73edb" kindref="member">b1</ref><sp/>=<sp/>b1</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a1ef835f2272a79acceeb6e27b128b155" kindref="member">weight_decay</ref><sp/>=<sp/>weight_decay</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a8f42d324af8ce652263e4c85a96fb12c" kindref="member">precond_update_prob</ref><sp/>=<sp/>precond_update_prob</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ab5b2bdf99a1a040adef57a7ff2832ff7" kindref="member">max_size_triangular</ref><sp/>=<sp/>max_size_triangular</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a501418dc2a3135b176cef9a83a453783" kindref="member">min_ndim_triangular</ref><sp/>=<sp/>min_ndim_triangular</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1af8f6cda6be902c347b669dc6d5f048d0" kindref="member">memory_save_mode</ref><sp/>=<sp/>memory_save_mode</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ae9cb2246b142e2d76ceb3447db2f2f6f" kindref="member">momentum_into_precond_update</ref><sp/>=<sp/>momentum_into_precond_update</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a893f9afd4f96d55cf2f6c69a4e58d885" kindref="member">precond_learning_rate</ref><sp/>=<sp/>0.1<sp/><sp/></highlight><highlight class="comment">#<sp/>hardcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ae7c1f7e56d949f67fdc8f17402a65d44" kindref="member">precond_init_scale</ref><sp/>=<sp/>1.0<sp/><sp/></highlight><highlight class="comment">#<sp/>hardcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a9b78679964ed2ae43ad9f6f55b479c48" kindref="member">_tiny</ref><sp/>=<sp/>1e-8</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a69d0bfa0158a67ebed295c4c493ee705" kindref="member">trust_region</ref><sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>0.1<sp/>*<sp/>mx.sign(x)<sp/>*<sp/>mx.log(mx.abs(x)<sp/>+<sp/>1)<sp/>+<sp/>0.9<sp/>*<sp/>mx.tanh(x)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._maybe_schedule(</highlight><highlight class="stringliteral">&quot;do_update_balance&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a082126dbacf9c3827690efc5543eadb2" kindref="member">_do_update_balance</ref><ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a0678e5d49b26018064ff82dd7571ee96" kindref="member">_do_update_balance</ref>)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a082126dbacf9c3827690efc5543eadb2" kindref="member">_do_update_balance</ref>(self,<sp/>step):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precond_update_prob<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemlx__optimizers_1_1kron_1a0056a1ad6ff5afc6a451f651607a316f" kindref="member">flat_exponential_schedule</ref>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a8f42d324af8ce652263e4c85a96fb12c" kindref="member">precond_update_prob</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a8f42d324af8ce652263e4c85a96fb12c" kindref="member">precond_update_prob</ref></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>callable(precond_update_prob):</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precond_update_prob<sp/>=<sp/><ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a8f42d324af8ce652263e4c85a96fb12c" kindref="member">precond_update_prob</ref>(step)<sp/><sp/></highlight><highlight class="comment">#<sp/>type:<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_update<sp/>=<sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ab878e08b42d6766d73afcd5e21a1623b" kindref="member">rng</ref>.random()<sp/>&lt;<sp/>precond_update_prob<sp/><sp/></highlight><highlight class="comment">#<sp/>type:<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>balance<sp/>=<sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ab878e08b42d6766d73afcd5e21a1623b" kindref="member">rng</ref>.random()<sp/>&lt;<sp/>0.01<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>do_update</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx.array((do_update,<sp/>balance))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classmlx__optimizers_1_1kron_1_1_kron_1addd708455583ada6a0831dfb17a87ba5" kindref="member">init_single</ref>(self,<sp/>parameter:<sp/>mx.array,<sp/>state:<sp/>dict):</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Initialize<sp/>optimizer<sp/>state&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;momentum_buffer&quot;</highlight><highlight class="normal">]<sp/>=<sp/>mx.zeros_like(parameter)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">],<sp/>state[</highlight><highlight class="stringliteral">&quot;exprs&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a357f1e530e4c0b3f060d86cfdb499bf2" kindref="member">init_Q_exprs</ref>(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ae7c1f7e56d949f67fdc8f17402a65d44" kindref="member">precond_init_scale</ref>,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ab5b2bdf99a1a040adef57a7ff2832ff7" kindref="member">max_size_triangular</ref>,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a501418dc2a3135b176cef9a83a453783" kindref="member">min_ndim_triangular</ref>,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1af8f6cda6be902c347b669dc6d5f048d0" kindref="member">memory_save_mode</ref>,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a4791ef356fcca43a084a08ebb9223634" kindref="member">apply_single</ref>(self,<sp/>gradient:<sp/>mx.array,<sp/>parameter:<sp/>mx.array,<sp/>state:<sp/>dict):</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Performs<sp/>a<sp/>single<sp/>optimization<sp/>step,<sp/>updating<sp/>:math:`m`<sp/>and<sp/>:math:`v`&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr<sp/>=<sp/>self.learning_rate.astype(gradient.dtype)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a7311c555c452817a4b11fbd7e6f73edb" kindref="member">b1</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;momentum_buffer&quot;</highlight><highlight class="normal">]<sp/>=<sp/>b1<sp/>*<sp/>state[</highlight><highlight class="stringliteral">&quot;momentum_buffer&quot;</highlight><highlight class="normal">]<sp/>+<sp/>(1<sp/>-<sp/>b1)<sp/>*<sp/>gradient</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debiased_momentum<sp/>=<sp/>state[</highlight><highlight class="stringliteral">&quot;momentum_buffer&quot;</highlight><highlight class="normal">]<sp/>/<sp/>(1<sp/>-<sp/>b1<sp/>**<sp/>self.state[</highlight><highlight class="stringliteral">&quot;step&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_update,<sp/>balance<sp/>=<sp/>self.state[</highlight><highlight class="stringliteral">&quot;do_update_balance&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gradient.ndim<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(balanced,<sp/>original)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(zip(<ref refid="namespacemlx__optimizers_1_1kron_1aca6648303e7d398cb45d5fe3de44adc6" kindref="member">_balance_Q</ref>(state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">]),<sp/>state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">])):</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">][i]<sp/>=<sp/>mx.where(balance,<sp/>balanced,<sp/>original)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(balanced,<sp/>original)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zip(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemlx__optimizers_1_1kron_1a9194fe7ea214e8c92205d792e96cebc6" kindref="member">_update_precond</ref>(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;exprs&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx.random.normal(debiased_momentum.shape,<sp/>dtype=debiased_momentum.dtype),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debiased_momentum<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1ae9cb2246b142e2d76ceb3447db2f2f6f" kindref="member">momentum_into_precond_update</ref><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>gradient,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a893f9afd4f96d55cf2f6c69a4e58d885" kindref="member">precond_learning_rate</ref>,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a9b78679964ed2ae43ad9f6f55b479c48" kindref="member">_tiny</ref>,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">][i]<sp/>=<sp/>mx.where(do_update,<sp/>balanced,<sp/>original)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pre_grad<sp/>=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a20fa43deb257b8bf5efdbb3a539ed0a5" kindref="member">_precond_grad</ref>(state[</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">],<sp/>state[</highlight><highlight class="stringliteral">&quot;exprs&quot;</highlight><highlight class="normal">],<sp/>debiased_momentum)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pre_grad<sp/>=<sp/>mx.clip(self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a69d0bfa0158a67ebed295c4c493ee705" kindref="member">trust_region</ref>(pre_grad<sp/>/<sp/>1.5)<sp/>*<sp/>1.5,<sp/>-2,<sp/>2)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a1ef835f2272a79acceeb6e27b128b155" kindref="member">weight_decay</ref><sp/>!=<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>parameter.ndim<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pre_grad<sp/>=<sp/>pre_grad<sp/>+<sp/>self.<ref refid="classmlx__optimizers_1_1kron_1_1_kron_1a1ef835f2272a79acceeb6e27b128b155" kindref="member">weight_decay</ref><sp/>*<sp/>parameter</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameter<sp/>-<sp/>lr<sp/>*<sp/>pre_grad</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a357f1e530e4c0b3f060d86cfdb499bf2" kindref="member">init_Q_exprs</ref>(t,<sp/>scale,<sp/>max_size,<sp/>min_ndim_triangular,<sp/>memory_save_mode):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;For<sp/>a<sp/>scalar<sp/>or<sp/>tensor<sp/>t,<sp/>we<sp/>initialize<sp/>its<sp/>preconditioner<sp/>Q<sp/>and</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>reusable<sp/>einsum<sp/>expressions<sp/>for<sp/>updating<sp/>Q<sp/>and<sp/>preconditioning<sp/>gradient.</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>letters<sp/>=<sp/>string.ascii_lowercase<sp/>+<sp/>string.ascii_uppercase</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>dtype<sp/>=<sp/>t.dtype</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>t.shape</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(shape)<sp/>==<sp/>0:<sp/><sp/></highlight><highlight class="comment">#<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q<sp/>=<sp/>[scale<sp/>*<sp/>mx.ones_like(t)]</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprA<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,-&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprGs<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;,-&gt;&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprP<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,,-&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">#<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(shape)<sp/>&gt;<sp/>13:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(f</highlight><highlight class="stringliteral">&quot;Got<sp/>tensor<sp/>with<sp/>dim<sp/>{len(t.shape)};<sp/>Einstein<sp/>runs<sp/>out<sp/>of<sp/>letters!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>scale<sp/>**<sp/>(1<sp/>/<sp/>len(shape))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>memory_save_mode<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim_diag<sp/>=<sp/>[</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>shape]</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>memory_save_mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;one_diag&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rev_sorted_dims<sp/>=<sp/>mx.argsort(shape)[::-1]</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim_diag<sp/>=<sp/>[</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>shape]</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim_diag[int(rev_sorted_dims[0])]<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>memory_save_mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;all_diag&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim_diag<sp/>=<sp/>[</highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>shape]</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f</highlight><highlight class="stringliteral">&quot;Invalid<sp/>memory_save_mode:<sp/>{memory_save_mode},<sp/>must<sp/>be<sp/>one<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[None,<sp/>&apos;one_diag&apos;,<sp/>&apos;all_diag&apos;]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1A,<sp/>piece2A,<sp/>piece3A<sp/>=<sp/>([],<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprGs<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1P,<sp/>piece2P,<sp/>piece3P,<sp/>piece4P<sp/>=<sp/>([],<sp/>[],<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(size,<sp/>dim_d)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(zip(shape,<sp/>dim_diag)):</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>size<sp/>==<sp/>1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>size<sp/>&gt;<sp/>max_size<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>len(shape)<sp/>&lt;<sp/>min_ndim_triangular<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>dim_d:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>use<sp/>diagonal<sp/>matrix<sp/>as<sp/>preconditioner<sp/>for<sp/>this<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.append(scale<sp/>*<sp/>mx.ones(size,<sp/>dtype=dtype))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1A.append(letters[i])</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece2A<sp/>=<sp/>piece2A<sp/>+<sp/>letters[i]</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece3A<sp/>=<sp/>piece3A<sp/>+<sp/>letters[i]</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(letters[i<sp/>+<sp/>13]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>j<sp/>==<sp/>i<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>letters[j])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(shape))]</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subscripts<sp/>=<sp/>piece1<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>piece1<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>letters[i<sp/>+<sp/>13]</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprGs.append(subscripts)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1P.append(letters[i<sp/>+<sp/>13])</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece2P.append(letters[i<sp/>+<sp/>13])</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece3P<sp/>=<sp/>piece3P<sp/>+<sp/>letters[i<sp/>+<sp/>13]</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece4P<sp/>=<sp/>piece4P<sp/>+<sp/>letters[i<sp/>+<sp/>13]</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>use<sp/>triangular<sp/>matrix<sp/>as<sp/>preconditioner<sp/>for<sp/>this<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.append(scale<sp/>*<sp/>mx.eye(size,<sp/>dtype=dtype))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1A.append(letters[i]<sp/>+<sp/>letters[i<sp/>+<sp/>13])</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece2A<sp/>=<sp/>piece2A<sp/>+<sp/>letters[i<sp/>+<sp/>13]</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece3A<sp/>=<sp/>piece3A<sp/>+<sp/>letters[i]</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(letters[i<sp/>+<sp/>13]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>j<sp/>==<sp/>i<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>letters[j])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(shape))]</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(letters[i<sp/>+<sp/>26]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>j<sp/>==<sp/>i<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>letters[j])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(shape))]</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subscripts<sp/>=<sp/>piece1<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>piece2<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>letters[i<sp/>+<sp/>13]<sp/>+<sp/>letters[i<sp/>+<sp/>26]</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprGs.append(subscripts)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a,<sp/>b,<sp/>c<sp/>=<sp/>(letters[i],<sp/>letters[i<sp/>+<sp/>13],<sp/>letters[i<sp/>+<sp/>26])</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece1P.append(a<sp/>+<sp/>b)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece2P.append(a<sp/>+<sp/>c)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece3P<sp/>=<sp/>piece3P<sp/>+<sp/>c</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>piece4P<sp/>=<sp/>piece4P<sp/>+<sp/>b</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprA<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">.join(piece1A)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>piece2A<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>piece3A</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprP<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">.join(piece1P)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">.join(piece2P)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>piece3P<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>piece4P</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[Q,<sp/>(exprA,<sp/>exprGs,<sp/>exprP)]</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1aca6648303e7d398cb45d5fe3de44adc6" kindref="member">_balance_Q</ref>(Q):</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>norms<sp/>=<sp/>mx.stack([mx.linalg.norm(q,<sp/>float(</highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>q<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Q])</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>geometric_mean<sp/>=<sp/>norms.prod()<sp/>**<sp/>(1<sp/>/<sp/>len(Q))</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[q<sp/>*<sp/>(geometric_mean<sp/>/<sp/>norms[i])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>q<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(Q)]</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">@mx.compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a541f5fe431db26da518047429721392d" kindref="member">_calc_A_and_conjB</ref>(exprA,<sp/>G,<sp/>Q,<sp/>V):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>mx.einsum(exprA,<sp/>*Q,<sp/>G)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>order<sp/>=<sp/>G.ndim</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>list(range(order))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>conjB<sp/>=<sp/>mx.transpose(mx.conj(V),<sp/>p[1:]<sp/>+<sp/>p[:1])</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>q<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(Q):</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conjB<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conjB<sp/>/<sp/>q</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>q.ndim<sp/>&lt;<sp/>2</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>better<sp/>to<sp/>use<sp/>`solve_triangular(q,<sp/>conjB,<sp/>upper=True,<sp/>left=False)`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>conjB<sp/>@<sp/>mx.linalg.inv(q,<sp/>stream=mx.cpu)<sp/><sp/></highlight><highlight class="comment">#<sp/>type:<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>order<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>&lt;<sp/>j:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conjB<sp/>=<sp/>mx.swapaxes(conjB,<sp/>i,<sp/>j)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A,<sp/>conjB</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a5f3821e840692d4a47968064f68827ed" kindref="member">_q_terms</ref>(exprGs,<sp/>A,<sp/>conjB):</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>terms<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>exprG<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>exprGs:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term1<sp/>=<sp/>mx.einsum(exprG,<sp/>A,<sp/>mx.conj(A))</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term2<sp/>=<sp/>mx.einsum(exprG,<sp/>mx.conj(conjB),<sp/>conjB)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terms.append((term1,<sp/>term2))</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>terms</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1aca341f6e0342949b701402955c4da1c8" kindref="member">H</ref>(a):</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx.conj(mx.transpose(a))</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a1c0ace15f507823de06c1797ef91efb5" kindref="member">imax</ref>(a):</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx.max(a),<sp/>mx.argmax(a)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1ab1d035c743d5a17dd39649afbc0c81d5" kindref="member">_lb</ref>(A,<sp/>max_abs):</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>A<sp/>/<sp/>max_abs</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>aa<sp/>=<sp/>mx.real(A<sp/>*<sp/>mx.conj(A))</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>vcol,<sp/>i<sp/>=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a1c0ace15f507823de06c1797ef91efb5" kindref="member">imax</ref>(mx.sum(aa,<sp/>axis=0))</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>vrow,<sp/>j<sp/>=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a1c0ace15f507823de06c1797ef91efb5" kindref="member">imax</ref>(mx.sum(aa,<sp/>axis=1))</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx.where(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vcol<sp/>&gt;<sp/>vrow,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_abs<sp/>*<sp/>mx.linalg.norm(((x<sp/>:=<sp/>mx.conj(A[:,<sp/>i])<sp/>@<sp/>A)<sp/>/<sp/>mx.linalg.norm(x))<sp/>@<sp/><ref refid="namespacemlx__optimizers_1_1kron_1aca341f6e0342949b701402955c4da1c8" kindref="member">H</ref>(A)),</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_abs<sp/>*<sp/>mx.linalg.norm(<ref refid="namespacemlx__optimizers_1_1kron_1aca341f6e0342949b701402955c4da1c8" kindref="member">H</ref>(x<sp/>:=<sp/>A<sp/>@<sp/>mx.conj(A[j]))<sp/>@<sp/>(x<sp/>/<sp/>mx.linalg.norm(x))),</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a189fcddc99067aa970b0a5baabe08382" kindref="member">_norm_lower_bound</ref>(A):</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Cheap<sp/>lower<sp/>bound<sp/>for<sp/>the<sp/>spectral<sp/>norm<sp/>of<sp/>A.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>max_abs<sp/>=<sp/>mx.linalg.norm(A,<sp/>float(</highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx.where(max_abs<sp/>&gt;<sp/>0,<sp/><ref refid="namespacemlx__optimizers_1_1kron_1ab1d035c743d5a17dd39649afbc0c81d5" kindref="member">_lb</ref>(A,<sp/>max_abs),<sp/>max_abs)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a9194fe7ea214e8c92205d792e96cebc6" kindref="member">_update_precond</ref>(Q,<sp/>exprs,<sp/>V,<sp/>G,<sp/>step,<sp/>tiny):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Update<sp/>Kronecker<sp/>product<sp/>preconditioner<sp/>Q<sp/>with<sp/>pair<sp/>(V,<sp/>G).&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>exprA,<sp/>exprGs,<sp/>_<sp/>=<sp/>exprs</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>A,<sp/>conjB<sp/>=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a541f5fe431db26da518047429721392d" kindref="member">_calc_A_and_conjB</ref>(exprA,<sp/>G,<sp/>Q,<sp/>V)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>terms<sp/>=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a5f3821e840692d4a47968064f68827ed" kindref="member">_q_terms</ref>(exprGs,<sp/>A,<sp/>conjB)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>updated_Q<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>q,<sp/>(term1,<sp/>term2)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(Q,<sp/>terms):</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>term1<sp/>-<sp/>term2</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>*=<sp/>step</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>q.ndim<sp/>&lt;<sp/>2:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>*=<sp/>q</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>/=<sp/>mx.linalg.norm(term1<sp/>+<sp/>term2,<sp/>float(</highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">))<sp/>+<sp/>tiny</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q_updated<sp/>=<sp/>q<sp/>-<sp/>tmp</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>mx.triu(tmp,<sp/>k=0)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>/=<sp/><ref refid="namespacemlx__optimizers_1_1kron_1a189fcddc99067aa970b0a5baabe08382" kindref="member">_norm_lower_bound</ref>(term1<sp/>+<sp/>term2)<sp/>+<sp/>tiny</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q_updated<sp/>=<sp/>q<sp/>-<sp/>(tmp<sp/>@<sp/>q)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated_Q.append(q_updated)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>updated_Q</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">@mx.compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemlx__optimizers_1_1kron_1a20fa43deb257b8bf5efdbb3a539ed0a5" kindref="member">_precond_grad</ref>(Q,<sp/>exprs,<sp/>G):</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Precondition<sp/>gradient<sp/>G<sp/>with<sp/>preconditioner<sp/>Q.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx.einsum(exprs[-1],<sp/>*[mx.conj(q)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>q<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Q],<sp/>*Q,<sp/>G)</highlight></codeline>
    </programlisting>
    <location file="mlx_optimizers/kron.py"/>
  </compounddef>
</doxygen>
